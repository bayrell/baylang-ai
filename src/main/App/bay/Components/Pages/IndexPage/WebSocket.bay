/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Components.Pages.IndexPage;

use Runtime.BaseObject;
use App.Components.Pages.IndexPage.ChatHistory;
use App.Components.Pages.IndexPage.IndexPageModel;


class WebSocket extends BaseObject
{
	var ws = null;
	IndexPageModel model = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(IndexPageModel model)
	{
		parent();
		this.model = model;
	}
	
	
	/**
	 * Connect
	 */
	void connect()
	{
		#ifcode JAVASCRIPT then
		this.ws = new WebSocket("ws://" + document.location.host + "/api/chat/app.chat/socket");
		#endif
		
		this.ws.binaryType = 'arraybuffer';
		this.ws.onopen = method this.onConnect;
		this.ws.onmessage = method this.onMessage;
		this.ws.onclose = method this.onDisconnect;
		this.ws.onerror = method this.onError;
	}
	
	
	/**
	 * Socket connect event
	 */
	void onConnect()
	{
		log("Connected")
		this.ws.send("Test message")
	}


	/**
	 * Socket disconnect event
	 */
	void onDisconnect()
	{
		log("Disconnected")
	}


	/**
	 * Socket error event
	 */
	void onError(var error)
	{
		log(error)
	}


	/**
	 * On message
	 */
	void onMessage(var message)
	{
		Dict item = rtl::json_decode(message.data);
		string event = item.get("event");
		if (event == "send_message")
		{
			Dict message = item.get("message");
			this.model.updateChat(message);
		}
		else if (event == "error")
		{
			log(item.get("message"));
		}
	}
}