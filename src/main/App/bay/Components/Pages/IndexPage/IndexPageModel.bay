/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Components.Pages.IndexPage;

use Runtime.lib;
use Runtime.Callback;
use Runtime.DateTime;
use Runtime.Serializer;
use Runtime.Entity.Factory;
use Runtime.Web.ApiResult;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Select;
use Runtime.Widget.TextArea;
use Runtime.Widget.ContextMenu.ContextMenuMessage;
use Runtime.Widget.ContextMenu.ContextMenuModel;
use Runtime.Widget.Crud.RulesManager;
use Runtime.Widget.Crud.Rules.Required;
use Runtime.Widget.Dialog.ConfirmDialogModel;
use Runtime.Widget.Dialog.DialogMessage;
use Runtime.Widget.Dialog.DialogModelException;
use Runtime.Widget.Dialog.PromptDialogModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.SaveDialogModel;
use App.Components.Pages.IndexPage.ChatHistory;
use App.Components.Pages.IndexPage.ChatMessage;
use App.Components.Pages.IndexPage.IndexPage;
use App.Components.Pages.IndexPage.WebSocket;


class IndexPageModel extends BasePageModel
{
	string component = classof IndexPage;
	string default_model = "qwen2.5-coder:3b";
	string selected_id = "";
	var socket = new WebSocket(this);
	RulesManager create_rules = null;
	Collection<ChatHistory> chats = [];
	ContextMenuModel context_menu = null;
	SaveDialogModel add_dialog = null;
	PromptDialogModel prompt_dialog = null;
	ConfirmDialogModel delete_dialog = null;
	
	
	/**
	 * Init widget
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Add context menu */
		this.context_menu = this.addWidget(classof ContextMenuModel, {
			"items":
			[
				{
					"key": "rename",
					"label": "Rename",
				},
				{
					"key": "delete",
					"label": "Delete",
				},
			],
			"events":
			{
				"clickItem": new Callback(this, "onContextMenu"),
			},
		});
		
		/* Create rules */
		this.create_rules = new RulesManager;
		this.create_rules.addRules([
			new Required{"name": "model"},
			new Required{"name": "message"},
		]);
		
		/* Add dialog */
		this.add_dialog = this.addWidget(classof SaveDialogModel, {
			"title": "New chat",
			"events":
			{
				"confirm": new Callback(this, "onCreateChat"),
			},
		});
		this.add_dialog.action = "add";
		this.add_dialog.add_form = this.add_dialog.addWidget(classof FormModel, {
			"show_result": false,
			"storage": new Factory
			(
				"Runtime.Widget.Form.FormSubmitStorage",
				{
					"api_name": "chat/app.chat",
					"method_name": "create",
				}
			),
			"fields":
			[
				{
					"name": "model",
					"label": "Model name",
					"component": classof Select,
					"props":
					{
						"options":
						[
							{"key": "qwen2.5:3b", "value": "qwen2.5:3b"},
							{"key": "qwen2.5-coder:3b", "value": "qwen2.5-coder:3b"},
							{"key": "llama3.2:1b", "value": "llama3.2:1b"},
						],
					},
				},
				{
					"name": "message",
					"label": "Message",
					"component": classof TextArea,
				}
			],
		});
		ButtonModel confirm_button = this.add_dialog.buttons.getWidget("confirm_button");
		confirm_button.content = "Add";
		confirm_button.styles = ["success"];
		
		/* Add prompt dialog */
		this.prompt_dialog = this.addWidget(classof PromptDialogModel, {
			"title": "Rename item"
			"events":
			{
				"confirm": new Callback(this, "onRenameItem"),
			},
		});
		
		/* Add delete dialog */
		this.delete_dialog = this.addWidget(classof ConfirmDialogModel, {
			"title": "Delete item"
			"content": "Delete message",
			"events":
			{
				"confirm": new Callback(this, "onDeleteItem"),
			},
		});
		ButtonModel confirm_button = this.delete_dialog.buttons.getWidget("confirm_button");
		confirm_button.content = "Delete";
		confirm_button.styles = ["danger"];
	}
	
	
	/**
	 * Load data
	 */
	async void loadData(RenderContainer container)
	{
		await parent(container);
	}
	
	
	/**
	 * Load chat
	 */
	async void loadChat()
	{
		ApiResult result = await this.layout.callApi({
			"api_name": "chat/app.chat",
			"method_name": "load"
		});
		if (not result.isSuccess()) return;
		
		Collection items = result.data.get("items");
		for (int i=0; i<items.count(); i++)
		{
			Dict item = items.get(i);
			ChatHistory history = new ChatHistory
			{
				"id": item.get("id"),
				"title": item.get("name"),
			};
			this.chats.append(history);
		}
	}
	
	
	/**
	 * Select chat
	 */
	void select(ChatHistory item)
	{
		this.selected_id = item.id;
	}
	
	
	/**
	 * Returns selected item
	 */
	ChatHistory getSelectedItem() =>
		this.chats.findItem(lib::equalAttr("id", this.selected_id))
	;
	
	
	/**
	 * Add click
	 */
	void onAddClick()
	{
		this.add_dialog.add_form.clear();
		this.add_dialog.add_form.item.set("model", this.default_model);
		this.add_dialog.show();
	}
	
	
	/**
	 * Add new chat
	 */
	async void onCreateChat()
	{
		/* Check fields */
		this.create_rules.clear();
		this.create_rules.setCreate(true);
		await this.create_rules.validate(this.add_dialog.add_form.item);
		if (not this.create_rules.correct())
		{
			string error_message = "Fields error";
			this.add_dialog.add_form.fields_error = this.create_rules.fields;
			this.add_dialog.add_form.result.setError(error_message)
			throw new DialogModelException(error_message);
		}
		else
		{
			this.add_dialog.add_form.fields_error = {};
		}
		
		/* Save model */
		this.default_model = this.add_dialog.add_form.item.get("model");
		
		/* Submit form */
		ApiResult result = await this.add_dialog.add_form.submit();
		if (not result.isSuccess())
		{
			this.add_dialog.add_form.result.setApiResult(result);
			throw new DialogModelException(result.message);
		}
		
		Dict chat = result.data.get("chat");
		Dict message = result.data.get("message");
		
		/* Create new chat */
		ChatHistory new_chat_item = new ChatHistory
		{
			"id": chat.get("id"),
			"title": chat.get("name"),
			"message":
			[
				new ChatMessage
				{
					"kind": "human",
					"message": message.get("message"),
				},
			],
		};
		
		/* Add created chat */
		this.select(new_chat_item);
		this.chats.prepend(new_chat_item);
	}
	
	
	/**
	 * Rename item
	 */
	async void onRenameItem(DialogMessage message)
	{
		ChatHistory selected_item = message.widget.data.get("selected_item");
		selected_item.title = message.value;
	}
	
	
	/**
	 * Delete item
	 */
	async void onDeleteItem(DialogMessage message)
	{
		/* Get selected item */
		ChatHistory selected_item = message.widget.data.get("selected_item");
		
		/* Send api request */
		ApiResult result = await this.layout.callApi({
			"api_name": "chat/app.chat",
			"method_name": "delete",
			"data":
			{
				"pk":
				{
					"id": selected_item.id
				}
			}
		});
		
		/* Remove chat */
		if (result.isSuccess())
		{
			int pos = this.chats.find(lib::equalAttr("id", selected_item.id));
			this.chats.remove(pos);
		}
	}
	
	
	/**
	 * Context menu click
	 */
	void onContextMenu(ContextMenuMessage message)
	{
		string item_key = message.item.get("key");
		if (item_key == "rename")
		{
			ChatHistory history = this.getSelectedItem();
			if (history)
			{
				this.prompt_dialog.data =
				{
					"selected_id": history.id,
					"selected_item": history,
				};
				this.prompt_dialog.title = "Rename " ~ history.title;
				this.prompt_dialog.setValue(history.title);
				this.prompt_dialog.show();
			}
		}
		else if (item_key == "delete")
		{
			ChatHistory history = this.getSelectedItem();
			if (history)
			{
				this.delete_dialog.data =
				{
					"selected_id": history.id,
					"selected_item": history,
				};
				this.delete_dialog.content = "Delete " ~ history.title ~ "?";
				this.delete_dialog.show();
			}
		}
	}
	
	
	/**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "chats", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle("Index page");
	}
}